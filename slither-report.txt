'forge clean' running (wd: /Volumes/UltraDisk/Dev2/aastar/SuperPaymaster)
'forge config --json' running
'forge build --build-info --skip */contracts/test/** */script/** --force' running (wd: /Volumes/UltraDisk/Dev2/aastar/SuperPaymaster)
INFO:Detectors:
SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462) uses arbitrary from in transferFrom: IERC20(xPNTsToken).transferFrom(user,treasury,xPNTsAmount) (src/paymasters/v2/core/SuperPaymasterV2.sol#444)
MySBT_v2_1.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.1.sol#190-268) uses arbitrary from in transferFrom: IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.1.sol#232)
MySBT_v2_3_1.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#199-281) uses arbitrary from in transferFrom: IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#245)
MySBT_v2_3_2.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#200-282) uses arbitrary from in transferFrom: IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#247)
MySBT_v2_3_3.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#201-283) uses arbitrary from in transferFrom: IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#248)
MySBT_v2_3.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.sol#202-284) uses arbitrary from in transferFrom: IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.sol#248)
MySBT_v2_4_0.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#209-291) uses arbitrary from in transferFrom: IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#256)
PaymasterV4.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v4/PaymasterV4.sol#207-261) uses arbitrary from in transferFrom: IERC20(userGasToken).safeTransferFrom(sender,treasury,tokenAmount) (src/paymasters/v4/PaymasterV4.sol#254)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom
INFO:Detectors:
Reentrancy in SuperPaymasterRegistry.slashPaymaster(address,string) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#459-482):
	External calls:
	- (success,None) = treasury.call{value: slashAmount}() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#473)
	State variables written after the call(s):
	- pm.isActive = false (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#478)
	SuperPaymasterRegistry.paymasters (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#72) can be used in cross function reentrancies:
	- SuperPaymasterRegistry.activate() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#276-286)
	- SuperPaymasterRegistry.deactivate() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#289-298)
	- SuperPaymasterRegistry.getActivePaymasters() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#376-394)
	- SuperPaymasterRegistry.getBestPaymaster() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#329-348)
	- SuperPaymasterRegistry.getLowestBidPaymaster() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#352-372)
	- SuperPaymasterRegistry.getPaymasterFullInfo(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#520-526)
	- SuperPaymasterRegistry.getPaymasterInfo(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#495-508)
	- SuperPaymasterRegistry.getRouterStats() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#533-555)
	- SuperPaymasterRegistry.isPaymasterActive(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#513-515)
	- SuperPaymasterRegistry.paymasters (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#72)
	- SuperPaymasterRegistry.placeBid(uint256) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#306-320)
	- SuperPaymasterRegistry.recordFailure(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#440-454)
	- SuperPaymasterRegistry.recordSuccess(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#421-436)
	- SuperPaymasterRegistry.updateFeeRate(uint256) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#262-273)
	- SuperPaymasterRegistry.updateReputation(address,uint256) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#403-417)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
SuperPaymasterV2.depositAPNTs(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#343-361) ignores return value by IERC20(aPNTsToken).transferFrom(msg.sender,address(this),amount) (src/paymasters/v2/core/SuperPaymasterV2.sol#358)
SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462) ignores return value by IERC20(xPNTsToken).transferFrom(user,treasury,xPNTsAmount) (src/paymasters/v2/core/SuperPaymasterV2.sol#444)
SuperPaymasterV2.withdrawTreasury(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#755-771) ignores return value by IERC20(aPNTsToken).transfer(superPaymasterTreasury,amount) (src/paymasters/v2/core/SuperPaymasterV2.sol#768)
PaymasterV4.withdrawPNT(address,address,uint256) (src/paymasters/v4/PaymasterV4.sol#501-504) ignores return value by IERC20(token).transfer(to,amount) (src/paymasters/v4/PaymasterV4.sol#503)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
SuperPaymasterV2._calculateAPNTsAmount(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#601-632) performs a multiplication on the result of a division:
	- ethPriceUSD = uint256(ethUsdPrice) * 1e18 / (10 ** decimals) (src/paymasters/v2/core/SuperPaymasterV2.sol#618)
	- gasCostUSD = (gasCostWei * ethPriceUSD) / 1e18 (src/paymasters/v2/core/SuperPaymasterV2.sol#621)
SuperPaymasterV2._calculateAPNTsAmount(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#601-632) performs a multiplication on the result of a division:
	- gasCostUSD = (gasCostWei * ethPriceUSD) / 1e18 (src/paymasters/v2/core/SuperPaymasterV2.sol#621)
	- totalCostUSD = gasCostUSD * (BPS_DENOMINATOR + serviceFeeRate) / BPS_DENOMINATOR (src/paymasters/v2/core/SuperPaymasterV2.sol#625)
SuperPaymasterV2._calculateAPNTsAmount(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#601-632) performs a multiplication on the result of a division:
	- totalCostUSD = gasCostUSD * (BPS_DENOMINATOR + serviceFeeRate) / BPS_DENOMINATOR (src/paymasters/v2/core/SuperPaymasterV2.sol#625)
	- aPNTsAmount = (totalCostUSD * 1e18) / aPNTsPriceUSD (src/paymasters/v2/core/SuperPaymasterV2.sol#629)
WeightedReputationCalculator._calculateNFTBonus(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#176-215) performs a multiplication on the result of a division:
	- holdingMonths = holdingTime / NFT_TIME_UNIT (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#199)
	- timeWeight = holdingMonths * NFT_BASE_SCORE_PER_MONTH (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#200)
WeightedReputationCalculator.getNFTBonusBreakdown(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#231-300) performs a multiplication on the result of a division:
	- holdingMonths = holdingTime / NFT_TIME_UNIT (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#278)
	- timeWeight = holdingMonths * NFT_BASE_SCORE_PER_MONTH (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#279)
MySBT_v2_4_0._calculateNFTReputation(uint256) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#925-965) performs a multiplication on the result of a division:
	- holdingMonths = holdingTime / NFT_TIME_UNIT (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#953)
	- nftScore = holdingMonths * NFT_BASE_SCORE_PER_MONTH (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#956)
PaymasterV4._calculatePNTAmount(uint256,address) (src/paymasters/v4/PaymasterV4.sol#340-370) performs a multiplication on the result of a division:
	- ethPriceUSD = uint256(ethUsdPrice) * 1e18 / (10 ** decimals) (src/paymasters/v4/PaymasterV4.sol#353)
	- gasCostUSD = (gasCostWei * ethPriceUSD) / 1e18 (src/paymasters/v4/PaymasterV4.sol#356)
PaymasterV4._calculatePNTAmount(uint256,address) (src/paymasters/v4/PaymasterV4.sol#340-370) performs a multiplication on the result of a division:
	- gasCostUSD = (gasCostWei * ethPriceUSD) / 1e18 (src/paymasters/v4/PaymasterV4.sol#356)
	- totalCostUSD = gasCostUSD * (BPS_DENOMINATOR + serviceFeeRate) / BPS_DENOMINATOR (src/paymasters/v4/PaymasterV4.sol#359)
PaymasterV4._calculatePNTAmount(uint256,address) (src/paymasters/v4/PaymasterV4.sol#340-370) performs a multiplication on the result of a division:
	- totalCostUSD = gasCostUSD * (BPS_DENOMINATOR + serviceFeeRate) / BPS_DENOMINATOR (src/paymasters/v4/PaymasterV4.sol#359)
	- aPNTsAmount = (totalCostUSD * 1e18) / aPNTsPrice (src/paymasters/v4/PaymasterV4.sol#363)
PaymasterV4._calculatePNTAmount(uint256,address) (src/paymasters/v4/PaymasterV4.sol#340-370) performs a multiplication on the result of a division:
	- aPNTsAmount = (totalCostUSD * 1e18) / aPNTsPrice (src/paymasters/v4/PaymasterV4.sol#363)
	- xPNTsAmount = (aPNTsAmount * rate) / 1e18 (src/paymasters/v4/PaymasterV4.sol#367)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
GTokenStaking.balanceOf(address) (src/paymasters/v2/core/GTokenStaking.sol#588-599) uses a dangerous strict equality:
	- info.stGTokenShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#590)
GTokenStaking.balanceOf(address) (src/paymasters/v2/core/GTokenStaking.sol#588-599) uses a dangerous strict equality:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#593)
GTokenStaking.balanceOf(address) (src/paymasters/v2/core/GTokenStaking.sol#588-599) uses a dangerous strict equality:
	- availableStake == 0 (src/paymasters/v2/core/GTokenStaking.sol#595)
GTokenStaking.calculateShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#747-759) uses a dangerous strict equality:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#752)
GTokenStaking.gTokenToShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#698-704) uses a dangerous strict equality:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#699)
GTokenStaking.getUnstakeTimeRemaining(address) (src/paymasters/v2/core/GTokenStaking.sol#724-740) uses a dangerous strict equality:
	- info.unstakeRequestedAt == 0 (src/paymasters/v2/core/GTokenStaking.sol#730)
GTokenStaking.requestUnstake() (src/paymasters/v2/core/GTokenStaking.sol#271-279) uses a dangerous strict equality:
	- stakes[msg.sender].stGTokenShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#272)
GTokenStaking.sharesToGToken(uint256) (src/paymasters/v2/core/GTokenStaking.sol#685-691) uses a dangerous strict equality:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#686)
GTokenStaking.sharesToGToken(uint256) (src/paymasters/v2/core/GTokenStaking.sol#685-691) uses a dangerous strict equality:
	- availableStake == 0 (src/paymasters/v2/core/GTokenStaking.sol#689)
GTokenStaking.slash(address,uint256,string) (src/paymasters/v2/core/GTokenStaking.sol#465-489) uses a dangerous strict equality:
	- slashedAmount == 0 (src/paymasters/v2/core/GTokenStaking.sol#479)
GTokenStaking.stake(uint256) (src/paymasters/v2/core/GTokenStaking.sol#214-265) uses a dangerous strict equality:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#229)
GTokenStaking.unstake() (src/paymasters/v2/core/GTokenStaking.sol#286-326) uses a dangerous strict equality:
	- info.unstakeRequestedAt == 0 (src/paymasters/v2/core/GTokenStaking.sol#289)
Registry.deactivateCommunity() (src/paymasters/v2/core/Registry.sol#517-528) uses a dangerous strict equality:
	- communities[communityAddress].registeredAt == 0 (src/paymasters/v2/core/Registry.sol#520)
Registry.getCommunityProfile(address) (src/paymasters/v2/core/Registry.sol#635-644) uses a dangerous strict equality:
	- profile.registeredAt == 0 (src/paymasters/v2/core/Registry.sol#641)
Registry.reactivateCommunity() (src/paymasters/v2/core/Registry.sol#533-544) uses a dangerous strict equality:
	- communities[communityAddress].registeredAt == 0 (src/paymasters/v2/core/Registry.sol#536)
Registry.updateCommunityProfile(Registry.CommunityProfile) (src/paymasters/v2/core/Registry.sol#428-512) uses a dangerous strict equality:
	- communities[communityAddress].registeredAt == 0 (src/paymasters/v2/core/Registry.sol#431)
SuperPaymasterV2._calculateXPNTsAmount(address,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#640-651) uses a dangerous strict equality:
	- rate == 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#643)
SuperPaymasterV2.updateExchangeRate(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#383-393) uses a dangerous strict equality:
	- accounts[msg.sender].stakedAt == 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#384)
SuperPaymasterV2.updateTreasury(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#367-377) uses a dangerous strict equality:
	- accounts[msg.sender].stakedAt == 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#368)
PaymasterV3._validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v3/PaymasterV3.sol#188-222) uses a dangerous strict equality:
	- sbtBalance == 0 (src/paymasters/v3/PaymasterV3.sol#205)
PaymasterV3.isUserQualified(address) (src/paymasters/v3/PaymasterV3.sol#361-380) uses a dangerous strict equality:
	- sbtBalance == 0 (src/paymasters/v3/PaymasterV3.sol#369)
PaymasterV3_1._validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v3/PaymasterV3_1.sol#187-221) uses a dangerous strict equality:
	- sbtBalance == 0 (src/paymasters/v3/PaymasterV3_1.sol#204)
PaymasterV3_1.isUserQualified(address) (src/paymasters/v3/PaymasterV3_1.sol#360-379) uses a dangerous strict equality:
	- sbtBalance == 0 (src/paymasters/v3/PaymasterV3_1.sol#368)
PaymasterV3_2._validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v3/PaymasterV3_2.sol#187-221) uses a dangerous strict equality:
	- sbtBalance == 0 (src/paymasters/v3/PaymasterV3_2.sol#204)
PaymasterV3_2.isUserQualified(address) (src/paymasters/v3/PaymasterV3_2.sol#360-379) uses a dangerous strict equality:
	- sbtBalance == 0 (src/paymasters/v3/PaymasterV3_2.sol#368)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865):
	External calls:
	- slashed = GTOKEN_STAKING.slash(community,slashAmount,string(abi.encodePacked(Registry v2.1 progressive slash: ,_toString(stake.failureCount), failures, ,_toString(slashPercentage),% penalty))) (src/paymasters/v2/core/Registry.sol#840-850)
	State variables written after the call(s):
	- communities[community].isActive = false (src/paymasters/v2/core/Registry.sol#860)
	Registry.communities (src/paymasters/v2/core/Registry.sol#125) can be used in cross function reentrancies:
	- Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865)
	- Registry.communities (src/paymasters/v2/core/Registry.sol#125)
	- Registry.deactivateCommunity() (src/paymasters/v2/core/Registry.sol#517-528)
	- Registry.getCommunityProfile(address) (src/paymasters/v2/core/Registry.sol#635-644)
	- Registry.getCommunityStatus(address) (src/paymasters/v2/core/Registry.sol#741-748)
	- Registry.isPermissionlessMintAllowed(address) (src/paymasters/v2/core/Registry.sol#769-775)
	- Registry.isRegisteredCommunity(address) (src/paymasters/v2/core/Registry.sol#756-762)
	- Registry.reactivateCommunity() (src/paymasters/v2/core/Registry.sol#533-544)
	- Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810)
	- Registry.updateCommunityProfile(Registry.CommunityProfile) (src/paymasters/v2/core/Registry.sol#428-512)
	- stake.stGTokenLocked -= slashed (src/paymasters/v2/core/Registry.sol#853)
	Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128) can be used in cross function reentrancies:
	- Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865)
	- Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128)
	- Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810)
	- Registry.resetFailureCount(address) (src/paymasters/v2/core/Registry.sol#872-875)
	- stake.totalSlashed += slashed (src/paymasters/v2/core/Registry.sol#854)
	Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128) can be used in cross function reentrancies:
	- Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865)
	- Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128)
	- Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810)
	- Registry.resetFailureCount(address) (src/paymasters/v2/core/Registry.sol#872-875)
	- stake.failureCount = 0 (src/paymasters/v2/core/Registry.sol#855)
	Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128) can be used in cross function reentrancies:
	- Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865)
	- Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128)
	- Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810)
	- Registry.resetFailureCount(address) (src/paymasters/v2/core/Registry.sol#872-875)
	- stake.isActive = false (src/paymasters/v2/core/Registry.sol#859)
	Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128) can be used in cross function reentrancies:
	- Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865)
	- Registry.communityStakes (src/paymasters/v2/core/Registry.sol#128)
	- Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810)
	- Registry.resetFailureCount(address) (src/paymasters/v2/core/Registry.sol#872-875)
Reentrancy in PaymasterFactory.deployPaymaster(string,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#97-131):
	External calls:
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#119)
	State variables written after the call(s):
	- paymasterByOperator[operator] = paymaster (src/paymasters/v2/core/PaymasterFactory.sol#124)
	PaymasterFactory.paymasterByOperator (src/paymasters/v2/core/PaymasterFactory.sol#30) can be used in cross function reentrancies:
	- PaymasterFactory.deployPaymaster(string,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#97-131)
	- PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#153-184)
	- PaymasterFactory.getPaymasterByOperator(address) (src/paymasters/v2/core/PaymasterFactory.sol#284-290)
	- PaymasterFactory.hasPaymaster(address) (src/paymasters/v2/core/PaymasterFactory.sol#380-386)
	- PaymasterFactory.paymasterByOperator (src/paymasters/v2/core/PaymasterFactory.sol#30)
Reentrancy in PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#153-184):
	External calls:
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#173)
	State variables written after the call(s):
	- paymasterByOperator[operator] = paymaster (src/paymasters/v2/core/PaymasterFactory.sol#177)
	PaymasterFactory.paymasterByOperator (src/paymasters/v2/core/PaymasterFactory.sol#30) can be used in cross function reentrancies:
	- PaymasterFactory.deployPaymaster(string,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#97-131)
	- PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#153-184)
	- PaymasterFactory.getPaymasterByOperator(address) (src/paymasters/v2/core/PaymasterFactory.sol#284-290)
	- PaymasterFactory.hasPaymaster(address) (src/paymasters/v2/core/PaymasterFactory.sol#380-386)
	- PaymasterFactory.paymasterByOperator (src/paymasters/v2/core/PaymasterFactory.sol#30)
Reentrancy in xPNTsFactory.deployxPNTsToken(string,string,string,string,uint256,address) (src/paymasters/v2/tokens/xPNTsFactory.sol#153-191):
	External calls:
	- newToken.addAutoApprovedSpender(SUPERPAYMASTER) (src/paymasters/v2/tokens/xPNTsFactory.sol#179)
	- newToken.addAutoApprovedSpender(paymasterAOA) (src/paymasters/v2/tokens/xPNTsFactory.sol#183)
	State variables written after the call(s):
	- communityToToken[msg.sender] = token (src/paymasters/v2/tokens/xPNTsFactory.sol#187)
	xPNTsFactory.communityToToken (src/paymasters/v2/tokens/xPNTsFactory.sol#52) can be used in cross function reentrancies:
	- xPNTsFactory.communityToToken (src/paymasters/v2/tokens/xPNTsFactory.sol#52)
	- xPNTsFactory.deployxPNTsToken(string,string,string,string,uint256,address) (src/paymasters/v2/tokens/xPNTsFactory.sol#153-191)
	- xPNTsFactory.getTokenAddress(address) (src/paymasters/v2/tokens/xPNTsFactory.sol#341-347)
	- xPNTsFactory.hasToken(address) (src/paymasters/v2/tokens/xPNTsFactory.sol#354-356)
Reentrancy in Registry.registerCommunity(Registry.CommunityProfile,uint256) (src/paymasters/v2/core/Registry.sol#293-421):
	External calls:
	- GTOKEN_STAKING.lockStake(msg.sender,stGTokenAmount,Registry community registration) (src/paymasters/v2/core/Registry.sol#332-336)
	- GTOKEN_STAKING.lockStake(msg.sender,stGTokenAmount,Registry community registration (Super mode)) (src/paymasters/v2/core/Registry.sol#346-350)
	State variables written after the call(s):
	- communities[communityAddress] = profile (src/paymasters/v2/core/Registry.sol#385)
	Registry.communities (src/paymasters/v2/core/Registry.sol#125) can be used in cross function reentrancies:
	- Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865)
	- Registry.communities (src/paymasters/v2/core/Registry.sol#125)
	- Registry.deactivateCommunity() (src/paymasters/v2/core/Registry.sol#517-528)
	- Registry.getCommunityProfile(address) (src/paymasters/v2/core/Registry.sol#635-644)
	- Registry.getCommunityStatus(address) (src/paymasters/v2/core/Registry.sol#741-748)
	- Registry.isPermissionlessMintAllowed(address) (src/paymasters/v2/core/Registry.sol#769-775)
	- Registry.isRegisteredCommunity(address) (src/paymasters/v2/core/Registry.sol#756-762)
	- Registry.reactivateCommunity() (src/paymasters/v2/core/Registry.sol#533-544)
	- Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810)
	- Registry.updateCommunityProfile(Registry.CommunityProfile) (src/paymasters/v2/core/Registry.sol#428-512)
Reentrancy in GTokenStaking.unlockStake(address,uint256) (src/paymasters/v2/core/GTokenStaking.sol#373-416):
	External calls:
	- IERC20(GTOKEN).safeTransfer(feeRecipient,feeInGT) (src/paymasters/v2/core/GTokenStaking.sol#409)
	State variables written after the call(s):
	- totalStaked -= feeInGT (src/paymasters/v2/core/GTokenStaking.sol#412)
	GTokenStaking.totalStaked (src/paymasters/v2/core/GTokenStaking.sol#74) can be used in cross function reentrancies:
	- GTokenStaking.balanceOf(address) (src/paymasters/v2/core/GTokenStaking.sol#588-599)
	- GTokenStaking.calculateShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#747-759)
	- GTokenStaking.gTokenToShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#698-704)
	- GTokenStaking.getGlobalStats() (src/paymasters/v2/core/GTokenStaking.sol#768-787)
	- GTokenStaking.sharesToGToken(uint256) (src/paymasters/v2/core/GTokenStaking.sol#685-691)
	- GTokenStaking.stake(uint256) (src/paymasters/v2/core/GTokenStaking.sol#214-265)
	- GTokenStaking.totalStaked (src/paymasters/v2/core/GTokenStaking.sol#74)
	- GTokenStaking.unlockStake(address,uint256) (src/paymasters/v2/core/GTokenStaking.sol#373-416)
	- GTokenStaking.unstake() (src/paymasters/v2/core/GTokenStaking.sol#286-326)
Reentrancy in SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462):
	External calls:
	- IERC20(xPNTsToken).transferFrom(user,treasury,xPNTsAmount) (src/paymasters/v2/core/SuperPaymasterV2.sol#444)
	State variables written after the call(s):
	- accounts[operator].aPNTsBalance -= aPNTsAmount (src/paymasters/v2/core/SuperPaymasterV2.sol#447)
	SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82) can be used in cross function reentrancies:
	- SuperPaymasterV2._calculateXPNTsAmount(address,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#640-651)
	- SuperPaymasterV2._updateReputation(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#556-579)
	- SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82)
	- SuperPaymasterV2.getOperatorAccount(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#802-808)
	- SuperPaymasterV2.isEligibleForUpgrade(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#828-839)
	- SuperPaymasterV2.unpauseOperator(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#788-791)
	- SuperPaymasterV2.updateExchangeRate(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#383-393)
	- SuperPaymasterV2.updateTreasury(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#367-377)
	- SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462)
	- accounts[operator].totalSpent += aPNTsAmount (src/paymasters/v2/core/SuperPaymasterV2.sol#451)
	SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82) can be used in cross function reentrancies:
	- SuperPaymasterV2._calculateXPNTsAmount(address,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#640-651)
	- SuperPaymasterV2._updateReputation(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#556-579)
	- SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82)
	- SuperPaymasterV2.getOperatorAccount(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#802-808)
	- SuperPaymasterV2.isEligibleForUpgrade(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#828-839)
	- SuperPaymasterV2.unpauseOperator(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#788-791)
	- SuperPaymasterV2.updateExchangeRate(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#383-393)
	- SuperPaymasterV2.updateTreasury(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#367-377)
	- SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462)
	- accounts[operator].totalTxSponsored += 1 (src/paymasters/v2/core/SuperPaymasterV2.sol#452)
	SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82) can be used in cross function reentrancies:
	- SuperPaymasterV2._calculateXPNTsAmount(address,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#640-651)
	- SuperPaymasterV2._updateReputation(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#556-579)
	- SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82)
	- SuperPaymasterV2.getOperatorAccount(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#802-808)
	- SuperPaymasterV2.isEligibleForUpgrade(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#828-839)
	- SuperPaymasterV2.unpauseOperator(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#788-791)
	- SuperPaymasterV2.updateExchangeRate(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#383-393)
	- SuperPaymasterV2.updateTreasury(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#367-377)
	- SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462)
	- _updateReputation(operator) (src/paymasters/v2/core/SuperPaymasterV2.sol#458)
		- account.consecutiveDays += daysSinceLastCheck (src/paymasters/v2/core/SuperPaymasterV2.sol#562)
		- account.lastCheckTime = block.timestamp (src/paymasters/v2/core/SuperPaymasterV2.sol#563)
		- account.reputationLevel = currentLevel + 1 (src/paymasters/v2/core/SuperPaymasterV2.sol#573)
		- account.reputationScore = REPUTATION_LEVELS[currentLevel] (src/paymasters/v2/core/SuperPaymasterV2.sol#574)
	SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82) can be used in cross function reentrancies:
	- SuperPaymasterV2._calculateXPNTsAmount(address,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#640-651)
	- SuperPaymasterV2._updateReputation(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#556-579)
	- SuperPaymasterV2.accounts (src/paymasters/v2/core/SuperPaymasterV2.sol#82)
	- SuperPaymasterV2.getOperatorAccount(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#802-808)
	- SuperPaymasterV2.isEligibleForUpgrade(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#828-839)
	- SuperPaymasterV2.unpauseOperator(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#788-791)
	- SuperPaymasterV2.updateExchangeRate(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#383-393)
	- SuperPaymasterV2.updateTreasury(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#367-377)
	- SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
WeightedReputationCalculator.getNFTBonusBreakdown(uint256,address).currentOwner (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#267) is a local variable never initialized
MySBT_v2_4_0.delegateAvatarUsage(address,uint256,address).nftOwner (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#710) is a local variable never initialized
MySBT_v2_3_1.delegateAvatarUsage(address,uint256,address).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#640) is a local variable never initialized
MySBT_v2_3_3.setAvatar(address,uint256).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#700) is a local variable never initialized
MySBT_v2_3.setAvatar(address,uint256).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.sol#506) is a local variable never initialized
MySBT_v2_3_2.delegateAvatarUsage(address,uint256,address).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#641) is a local variable never initialized
MySBT_v2_3_1.setAvatar(address,uint256).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#605) is a local variable never initialized
MySBT_v2_3.delegateAvatarUsage(address,uint256,address).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.sol#541) is a local variable never initialized
MySBT_v2_4_0.setAvatar(address,uint256).nftOwner (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#675) is a local variable never initialized
MySBT_v2_4_0._calculateNFTReputation(uint256).currentOwner (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#940) is a local variable never initialized
WeightedReputationCalculator._calculateNFTBonus(uint256,address).currentOwner (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#188) is a local variable never initialized
MySBT_v2_3_2.setAvatar(address,uint256).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#606) is a local variable never initialized
MySBT_v2_1.setAvatar(address,uint256).nftOwner (src/paymasters/v2/tokens/MySBT_v2.1.sol#486) is a local variable never initialized
MySBT_v2_3_3.delegateAvatarUsage(address,uint256,address).nftOwner (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#735) is a local variable never initialized
MySBT_v2_1.delegateAvatarUsage(address,uint256,address).nftOwner (src/paymasters/v2/tokens/MySBT_v2.1.sol#521) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables
INFO:Detectors:
SuperPaymasterV2.executeSlashWithBLS(address,SuperPaymasterV2.SlashLevel,bytes) (src/paymasters/v2/core/SuperPaymasterV2.sol#490-546) ignores return value by IGTokenStaking(GTOKEN_STAKING).slash(operator,slashAmount,Low aPNTs balance) (src/paymasters/v2/core/SuperPaymasterV2.sol#542)
SuperPaymasterV2._calculateAPNTsAmount(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#601-632) ignores return value by (None,ethUsdPrice,None,updatedAt,None) = ethUsdPriceFeed.latestRoundData() (src/paymasters/v2/core/SuperPaymasterV2.sol#603)
MySBT_v2_1.getCommunityReputation(address,address) (src/paymasters/v2/tokens/MySBT_v2.1.sol#620-644) ignores return value by (communityScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,community,tokenId) (src/paymasters/v2/tokens/MySBT_v2.1.sol#631-639)
MySBT_v2_1.getGlobalReputation(address) (src/paymasters/v2/tokens/MySBT_v2.1.sol#651-684) ignores return value by (globalScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,address(0),tokenId) (src/paymasters/v2/tokens/MySBT_v2.1.sol#662-670)
MySBT_v2_3_1.getCommunityReputation(address,address) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#747-771) ignores return value by (communityScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,community,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#758-766)
MySBT_v2_3_1.getGlobalReputation(address) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#778-811) ignores return value by (globalScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,address(0),tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#789-797)
MySBT_v2_3_2.getCommunityReputation(address,address) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#748-772) ignores return value by (communityScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,community,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#759-767)
MySBT_v2_3_2.getGlobalReputation(address) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#779-812) ignores return value by (globalScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,address(0),tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#790-798)
MySBT_v2_3_3.getCommunityReputation(address,address) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#842-866) ignores return value by (communityScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,community,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#853-861)
MySBT_v2_3_3.getGlobalReputation(address) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#873-906) ignores return value by (globalScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,address(0),tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#884-892)
MySBT_v2_3.getCommunityReputation(address,address) (src/paymasters/v2/tokens/MySBT_v2.3.sol#648-672) ignores return value by (communityScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,community,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.sol#659-667)
MySBT_v2_3.getGlobalReputation(address) (src/paymasters/v2/tokens/MySBT_v2.3.sol#679-712) ignores return value by (globalScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,address(0),tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.sol#690-698)
MySBT_v2_4_0.getCommunityReputation(address,address) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#817-841) ignores return value by (communityScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,community,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#828-836)
MySBT_v2_4_0.getGlobalReputation(address) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#848-881) ignores return value by (globalScore) = IReputationCalculator(reputationCalculator).calculateReputation(user,address(0),tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#859-867)
PaymasterV3._postOp(PostOpMode,bytes,uint256,uint256) (src/paymasters/v3/PaymasterV3.sol#228-271) ignores return value by ISettlement(settlementContract).recordGasFee(user,gasToken,gasGwei,userOpHash) (src/paymasters/v3/PaymasterV3.sol#255-270)
PaymasterV3_1._postOp(PostOpMode,bytes,uint256,uint256) (src/paymasters/v3/PaymasterV3_1.sol#227-270) ignores return value by ISettlement(settlementContract).recordGasFee(user,gasToken,gasGwei,userOpHash) (src/paymasters/v3/PaymasterV3_1.sol#254-269)
PaymasterV3_2._postOp(PostOpMode,bytes,uint256,uint256) (src/paymasters/v3/PaymasterV3_2.sol#227-270) ignores return value by ISettlement(settlementContract).recordGasFee(user,gasToken,gasGwei,userOpHash) (src/paymasters/v3/PaymasterV3_2.sol#254-269)
PaymasterV4._calculatePNTAmount(uint256,address) (src/paymasters/v4/PaymasterV4.sol#340-370) ignores return value by (None,ethUsdPrice,None,updatedAt,None) = ethUsdPriceFeed.latestRoundData() (src/paymasters/v4/PaymasterV4.sol#342)
Settlement.onlyRegisteredPaymaster() (src/paymasters/v4/Settlement.sol#77-84) ignores return value by (_feeRate,isActive,None,None,None) = registry.getPaymasterInfo(msg.sender) (src/paymasters/v4/Settlement.sol#78)
SettlementV3_1.onlyRegisteredPaymaster() (src/paymasters/v4/SettlementV3_1.sol#68-75) ignores return value by (_feeRate,isActive,None,None,None) = registry.getPaymasterInfo(msg.sender) (src/paymasters/v4/SettlementV3_1.sol#69)
SettlementV3_2.onlyRegisteredPaymaster() (src/paymasters/v4/SettlementV3_2.sol#77-84) ignores return value by (_feeRate,isActive,None,None,None) = registry.getPaymasterInfo(msg.sender) (src/paymasters/v4/SettlementV3_2.sol#78)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
BasePaymasterRouter.constructor(address,uint256)._owner (src/base/BasePaymasterRouter.sol#40) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
ISBT.exists(uint256).exists (src/interfaces/ISBT.sol#30) shadows:
	- ISBT.exists(uint256) (src/interfaces/ISBT.sol#30) (function)
SuperPaymasterRegistry.constructor(address,address,uint256,uint256,uint256)._owner (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#169) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
PaymasterFactory.hasPaymaster(address).hasPaymaster (src/paymasters/v2/core/PaymasterFactory.sol#383) shadows:
	- PaymasterFactory.hasPaymaster(address) (src/paymasters/v2/core/PaymasterFactory.sol#380-386) (function)
xPNTsToken.constructor(string,string,address,string,string,uint256).name (src/paymasters/v2/tokens/xPNTsToken.sol#84) shadows:
	- ERC20.name() (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/ERC20.sol#58-60) (function)
	- IERC20Metadata.name() (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/IERC20Metadata.sol#15) (function)
xPNTsToken.constructor(string,string,address,string,string,uint256).symbol (src/paymasters/v2/tokens/xPNTsToken.sol#85) shadows:
	- ERC20.symbol() (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/ERC20.sol#66-68) (function)
	- IERC20Metadata.symbol() (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/IERC20Metadata.sol#20) (function)
xPNTsToken.getMetadata()._name (src/paymasters/v2/tokens/xPNTsToken.sol#276) shadows:
	- EIP712._name (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/EIP712.sol#49) (state variable)
	- ERC20._name (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/ERC20.sol#41) (state variable)
xPNTsToken.getMetadata()._symbol (src/paymasters/v2/tokens/xPNTsToken.sol#277) shadows:
	- ERC20._symbol (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/ERC20.sol#42) (state variable)
PaymasterV3.constructor(address,address,address,address,address,uint256)._owner (src/paymasters/v3/PaymasterV3.sol#111) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
PaymasterV3_1.constructor(address,address,address,address,address,uint256)._owner (src/paymasters/v3/PaymasterV3_1.sol#110) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
PaymasterV3_2.constructor(address,address,address,address,address,uint256)._owner (src/paymasters/v3/PaymasterV3_2.sol#110) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
PaymasterV4.constructor(address,address,address,address,uint256,uint256,address)._owner (src/paymasters/v4/PaymasterV4.sol#173) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
PaymasterV4_1.constructor(address,address,address,address,uint256,uint256,address,address,address,address)._owner (src/paymasters/v4/PaymasterV4_1.sol#57) shadows:
	- Ownable._owner (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#21) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
MySBT_v2_1.setDAOMultisig(address) (src/paymasters/v2/tokens/MySBT_v2.1.sol#756-759) should emit an event for: 
	- daoMultisig = newDAO (src/paymasters/v2/tokens/MySBT_v2.1.sol#758) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control
INFO:Detectors:
PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes).paymaster (src/paymasters/v2/core/PaymasterFactory.sol#157) lacks a zero-check on :
		- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#173)
MySBT_v2_1.setReputationCalculator(address).calculator (src/paymasters/v2/tokens/MySBT_v2.1.sol#729) lacks a zero-check on :
		- reputationCalculator = calculator (src/paymasters/v2/tokens/MySBT_v2.1.sol#731)
MySBT_v2_3_1.setReputationCalculator(address).calculator (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#863) lacks a zero-check on :
		- reputationCalculator = calculator (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#865)
MySBT_v2_3_2.setReputationCalculator(address).calculator (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#864) lacks a zero-check on :
		- reputationCalculator = calculator (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#866)
MySBT_v2_3_3.setReputationCalculator(address).calculator (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#958) lacks a zero-check on :
		- reputationCalculator = calculator (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#960)
MySBT_v2_3.setReputationCalculator(address).calculator (src/paymasters/v2/tokens/MySBT_v2.3.sol#764) lacks a zero-check on :
		- reputationCalculator = calculator (src/paymasters/v2/tokens/MySBT_v2.3.sol#766)
MySBT_v2_4_0.setReputationCalculator(address).calculator (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#975) lacks a zero-check on :
		- reputationCalculator = calculator (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#977)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
SuperPaymasterV2._hasSBT(address,address[]) (src/paymasters/v2/core/SuperPaymasterV2.sol#587-594) has external calls inside a loop: IERC721(sbts[i]).balanceOf(user) > 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#589)
	Calls stack containing the loop:
		SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256)
WeightedReputationCalculator._calculateNFTBonus(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#176-215) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#189-193)
	Calls stack containing the loop:
		WeightedReputationCalculator.calculateReputation(address,address,uint256)
WeightedReputationCalculator._calculateNFTBonus(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#176-215) has external calls inside a loop: multiplier = ratingRegistry.getMultiplier(binding.nftContract) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#206)
	Calls stack containing the loop:
		WeightedReputationCalculator.calculateReputation(address,address,uint256)
WeightedReputationCalculator._calculateNFTBonus(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#176-215) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#189-193)
	Calls stack containing the loop:
		WeightedReputationCalculator.getReputationBreakdown(address,address,uint256)
WeightedReputationCalculator._calculateNFTBonus(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#176-215) has external calls inside a loop: multiplier = ratingRegistry.getMultiplier(binding.nftContract) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#206)
	Calls stack containing the loop:
		WeightedReputationCalculator.getReputationBreakdown(address,address,uint256)
WeightedReputationCalculator.getNFTBonusBreakdown(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#231-300) has external calls inside a loop: owner = IERC721(bindings[i].nftContract).ownerOf(bindings[i].nftTokenId) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#247-251)
WeightedReputationCalculator.getNFTBonusBreakdown(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#231-300) has external calls inside a loop: owner_scope_1 = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#268-272)
WeightedReputationCalculator.getNFTBonusBreakdown(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#231-300) has external calls inside a loop: multiplier = ratingRegistry.getMultiplier(binding.nftContract) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#285)
MySBT_v2_3_1._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#820-853) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#839-846)
	Calls stack containing the loop:
		MySBT_v2_3_1.getGlobalReputation(address)
MySBT_v2_3_2._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#821-854) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#840-847)
	Calls stack containing the loop:
		MySBT_v2_3_2.getGlobalReputation(address)
MySBT_v2_3_3._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#915-948) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#934-941)
	Calls stack containing the loop:
		MySBT_v2_3_3.getGlobalReputation(address)
MySBT_v2_3._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.sol#721-754) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/tokens/MySBT_v2.3.sol#740-747)
	Calls stack containing the loop:
		MySBT_v2_3.getGlobalReputation(address)
MySBT_v2_4_0._calculateNFTReputation(uint256) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#925-965) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#941-946)
	Calls stack containing the loop:
		MySBT_v2_4_0.getCommunityReputation(address,address)
		MySBT_v2_4_0._calculateDefaultReputation(uint256,address)
MySBT_v2_4_0._calculateNFTReputation(uint256) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#925-965) has external calls inside a loop: owner = IERC721(binding.nftContract).ownerOf(binding.nftTokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#941-946)
	Calls stack containing the loop:
		MySBT_v2_4_0.getGlobalReputation(address)
		MySBT_v2_4_0._calculateDefaultReputation(uint256,address)
PaymasterV4._hasAnySBT(address) (src/paymasters/v4/PaymasterV4.sol#286-294) has external calls inside a loop: ISBT(supportedSBTs[i]).balanceOf(user) > 0 (src/paymasters/v4/PaymasterV4.sol#289)
	Calls stack containing the loop:
		PaymasterV4.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256)
PaymasterV4._getUserGasToken(address,uint256,address) (src/paymasters/v4/PaymasterV4.sol#302-330) has external calls inside a loop: balance_scope_1 = IERC20(_token).balanceOf(user) (src/paymasters/v4/PaymasterV4.sol#322)
	Calls stack containing the loop:
		PaymasterV4.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256)
PaymasterV4._getUserGasToken(address,uint256,address) (src/paymasters/v4/PaymasterV4.sol#302-330) has external calls inside a loop: allowance_scope_2 = IERC20(_token).allowance(user,address(this)) (src/paymasters/v4/PaymasterV4.sol#323)
	Calls stack containing the loop:
		PaymasterV4.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256)
PaymasterV4._hasAnySBT(address) (src/paymasters/v4/PaymasterV4.sol#286-294) has external calls inside a loop: ISBT(supportedSBTs[i]).balanceOf(user) > 0 (src/paymasters/v4/PaymasterV4.sol#289)
	Calls stack containing the loop:
		PaymasterV4.checkUserQualification(address,uint256)
PaymasterV4._getUserGasToken(address,uint256,address) (src/paymasters/v4/PaymasterV4.sol#302-330) has external calls inside a loop: balance_scope_1 = IERC20(_token).balanceOf(user) (src/paymasters/v4/PaymasterV4.sol#322)
	Calls stack containing the loop:
		PaymasterV4.checkUserQualification(address,uint256)
PaymasterV4._getUserGasToken(address,uint256,address) (src/paymasters/v4/PaymasterV4.sol#302-330) has external calls inside a loop: allowance_scope_2 = IERC20(_token).allowance(user,address(this)) (src/paymasters/v4/PaymasterV4.sol#323)
	Calls stack containing the loop:
		PaymasterV4.checkUserQualification(address,uint256)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in PaymasterFactory.deployPaymaster(string,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#97-131):
	External calls:
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#119)
	State variables written after the call(s):
	- operatorByPaymaster[paymaster] = operator (src/paymasters/v2/core/PaymasterFactory.sol#125)
	- paymasterList.push(paymaster) (src/paymasters/v2/core/PaymasterFactory.sol#126)
	- totalDeployed ++ (src/paymasters/v2/core/PaymasterFactory.sol#128)
Reentrancy in PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#153-184):
	External calls:
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#173)
	State variables written after the call(s):
	- operatorByPaymaster[paymaster] = operator (src/paymasters/v2/core/PaymasterFactory.sol#178)
	- paymasterList.push(paymaster) (src/paymasters/v2/core/PaymasterFactory.sol#179)
	- totalDeployed ++ (src/paymasters/v2/core/PaymasterFactory.sol#181)
Reentrancy in xPNTsFactory.deployxPNTsToken(string,string,string,string,uint256,address) (src/paymasters/v2/tokens/xPNTsFactory.sol#153-191):
	External calls:
	- newToken.addAutoApprovedSpender(SUPERPAYMASTER) (src/paymasters/v2/tokens/xPNTsFactory.sol#179)
	- newToken.addAutoApprovedSpender(paymasterAOA) (src/paymasters/v2/tokens/xPNTsFactory.sol#183)
	State variables written after the call(s):
	- deployedTokens.push(token) (src/paymasters/v2/tokens/xPNTsFactory.sol#188)
Reentrancy in MySBT_v2_1.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.1.sol#190-268):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.1.sol#229)
	- IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.1.sol#232)
	- IGToken(GTOKEN).burn(mintFee) (src/paymasters/v2/tokens/MySBT_v2.1.sol#233)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.1.sol#236)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.1.sol#236)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.1.sol#236)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_3_1.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#199-281):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#242)
	- IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#245)
	- IGToken(GTOKEN).burn(mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#246)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#249)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#249)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#249)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_3_2.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#200-282):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#243)
	- IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#247)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#250)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#250)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#250)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_3_3.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#201-283):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#244)
	- IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#248)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#251)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#251)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#251)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_3.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.sol#202-284):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.sol#245)
	- IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.sol#248)
	- IGToken(GTOKEN).burn(mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.sol#249)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.sol#252)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.sol#252)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.sol#252)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_4_0.mintOrAddMembership(address,string) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#209-291):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#252)
	- IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#256)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#259)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#259)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#259)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in Registry.registerCommunity(Registry.CommunityProfile,uint256) (src/paymasters/v2/core/Registry.sol#293-421):
	External calls:
	- GTOKEN_STAKING.lockStake(msg.sender,stGTokenAmount,Registry community registration) (src/paymasters/v2/core/Registry.sol#332-336)
	- GTOKEN_STAKING.lockStake(msg.sender,stGTokenAmount,Registry community registration (Super mode)) (src/paymasters/v2/core/Registry.sol#346-350)
	State variables written after the call(s):
	- communityByENS[profile.ensName] = communityAddress (src/paymasters/v2/core/Registry.sol#401)
	- communityByName[lowercaseName] = communityAddress (src/paymasters/v2/core/Registry.sol#398)
	- communityBySBT[sbtAddress] = communityAddress (src/paymasters/v2/core/Registry.sol#407)
	- communityList.push(communityAddress) (src/paymasters/v2/core/Registry.sol#411)
	- communityStakes[communityAddress] = CommunityStake({stGTokenLocked:stGTokenAmount,failureCount:0,lastFailureTime:0,totalSlashed:0,isActive:true}) (src/paymasters/v2/core/Registry.sol#389-395)
	- communityStakes[communityAddress] = CommunityStake({stGTokenLocked:GTOKEN_STAKING.getLockedStake(msg.sender,address(this)),failureCount:0,lastFailureTime:0,totalSlashed:0,isActive:true}) (src/paymasters/v2/core/Registry.sol#389-395)
Reentrancy in GTokenStaking.stake(uint256) (src/paymasters/v2/core/GTokenStaking.sol#214-265):
	External calls:
	- IERC20(GTOKEN).safeTransferFrom(msg.sender,address(this),amount) (src/paymasters/v2/core/GTokenStaking.sol#226)
	State variables written after the call(s):
	- userStake.amount += amount (src/paymasters/v2/core/GTokenStaking.sol#243)
	- userStake.stGTokenShares += shares (src/paymasters/v2/core/GTokenStaking.sol#244)
	- userStake.unstakeRequestedAt = 0 (src/paymasters/v2/core/GTokenStaking.sol#248)
	- stakes[msg.sender] = StakeInfo({amount:amount,stGTokenShares:shares,stakedAt:block.timestamp,unstakeRequestedAt:0}) (src/paymasters/v2/core/GTokenStaking.sol#252-257)
	- totalShares += shares (src/paymasters/v2/core/GTokenStaking.sol#262)
	- totalStaked += amount (src/paymasters/v2/core/GTokenStaking.sol#261)
Reentrancy in MySBT_v2_3_1.userMint(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#291-383):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#344)
	- IERC20(GTOKEN).safeTransferFrom(user,address(this),mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#347)
	- IGToken(GTOKEN).burn(mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#348)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#351)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#351)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#351)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_3_2.userMint(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#292-384):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#345)
	- IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#349)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#352)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#352)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#352)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_3_3.userMint(address,string) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#293-385):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#346)
	- IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#350)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#353)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#353)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#353)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in MySBT_v2_4_0.userMint(address,string) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#301-393):
	External calls:
	- IGTokenStaking(GTOKEN_STAKING).lockStake(user,minLockAmount,MySBT) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#354)
	- IERC20(GTOKEN).safeTransferFrom(user,BURN_ADDRESS,mintFee) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#358)
	State variables written after the call(s):
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#361)
		- _balances[from] -= 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#255)
		- _balances[to] += 1 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#261)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#361)
		- _owners[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#265)
	- _mint(user,tokenId) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#361)
		- _tokenApprovals[tokenId] = to (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#423)
Reentrancy in SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462):
	External calls:
	- IERC20(xPNTsToken).transferFrom(user,treasury,xPNTsAmount) (src/paymasters/v2/core/SuperPaymasterV2.sol#444)
	State variables written after the call(s):
	- treasuryAPNTsBalance += aPNTsAmount (src/paymasters/v2/core/SuperPaymasterV2.sol#448)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in BLSAggregator._executeSlash(uint256,address,uint8,bytes) (src/paymasters/v2/monitoring/BLSAggregator.sol#341-371):
	External calls:
	- ISuperPaymaster(SUPERPAYMASTER).executeSlashWithBLS(operator,level,proof) (src/paymasters/v2/monitoring/BLSAggregator.sol#361-365)
	- IDVTValidator(DVT_VALIDATOR).markProposalExecuted(proposalId) (src/paymasters/v2/monitoring/BLSAggregator.sol#368)
	Event emitted after the call(s):
	- SlashExecuted(proposalId,operator,slashLevel,proof) (src/paymasters/v2/monitoring/BLSAggregator.sol#370)
Reentrancy in Registry._slashCommunity(address) (src/paymasters/v2/core/Registry.sol#820-865):
	External calls:
	- slashed = GTOKEN_STAKING.slash(community,slashAmount,string(abi.encodePacked(Registry v2.1 progressive slash: ,_toString(stake.failureCount), failures, ,_toString(slashPercentage),% penalty))) (src/paymasters/v2/core/Registry.sol#840-850)
	Event emitted after the call(s):
	- CommunityDeactivated(community,Insufficient stake after slash) (src/paymasters/v2/core/Registry.sol#861)
	- CommunitySlashed(community,slashed,stake.stGTokenLocked,block.timestamp) (src/paymasters/v2/core/Registry.sol#864)
Reentrancy in PaymasterV4_1.deactivateFromRegistry() (src/paymasters/v4/PaymasterV4_1.sol#110-121):
	External calls:
	- registry.deactivate() (src/paymasters/v4/PaymasterV4_1.sol#118)
	Event emitted after the call(s):
	- DeactivatedFromRegistry(address(this)) (src/paymasters/v4/PaymasterV4_1.sol#120)
Reentrancy in PaymasterFactory.deployPaymaster(string,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#97-131):
	External calls:
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#119)
	Event emitted after the call(s):
	- PaymasterDeployed(operator,paymaster,version,block.timestamp) (src/paymasters/v2/core/PaymasterFactory.sol#130)
Reentrancy in PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#153-184):
	External calls:
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#173)
	Event emitted after the call(s):
	- PaymasterDeployed(operator,paymaster,version,block.timestamp) (src/paymasters/v2/core/PaymasterFactory.sol#183)
Reentrancy in xPNTsFactory.deployxPNTsToken(string,string,string,string,uint256,address) (src/paymasters/v2/tokens/xPNTsFactory.sol#153-191):
	External calls:
	- newToken.addAutoApprovedSpender(SUPERPAYMASTER) (src/paymasters/v2/tokens/xPNTsFactory.sol#179)
	- newToken.addAutoApprovedSpender(paymasterAOA) (src/paymasters/v2/tokens/xPNTsFactory.sol#183)
	Event emitted after the call(s):
	- xPNTsTokenDeployed(msg.sender,token,name,symbol) (src/paymasters/v2/tokens/xPNTsFactory.sol#190)
Reentrancy in GTokenStaking.stake(uint256) (src/paymasters/v2/core/GTokenStaking.sol#214-265):
	External calls:
	- IERC20(GTOKEN).safeTransferFrom(msg.sender,address(this),amount) (src/paymasters/v2/core/GTokenStaking.sol#226)
	Event emitted after the call(s):
	- Staked(msg.sender,amount,shares,block.timestamp) (src/paymasters/v2/core/GTokenStaking.sol#264)
Reentrancy in GTokenStaking.unlockStake(address,uint256) (src/paymasters/v2/core/GTokenStaking.sol#373-416):
	External calls:
	- IERC20(GTOKEN).safeTransfer(feeRecipient,feeInGT) (src/paymasters/v2/core/GTokenStaking.sol#409)
	Event emitted after the call(s):
	- StakeUnlocked(user,msg.sender,grossAmount,exitFee,netAmount) (src/paymasters/v2/core/GTokenStaking.sol#415)
Reentrancy in GTokenStaking.unstake() (src/paymasters/v2/core/GTokenStaking.sol#286-326):
	External calls:
	- IERC20(GTOKEN).safeTransfer(msg.sender,actualAmount) (src/paymasters/v2/core/GTokenStaking.sol#323)
	Event emitted after the call(s):
	- Unstaked(msg.sender,info.amount,actualAmount,block.timestamp) (src/paymasters/v2/core/GTokenStaking.sol#325)
Reentrancy in SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462):
	External calls:
	- IERC20(xPNTsToken).transferFrom(user,treasury,xPNTsAmount) (src/paymasters/v2/core/SuperPaymasterV2.sol#444)
	Event emitted after the call(s):
	- ReputationUpdated(operator,account.reputationScore,account.reputationLevel) (src/paymasters/v2/core/SuperPaymasterV2.sol#576)
		- _updateReputation(operator) (src/paymasters/v2/core/SuperPaymasterV2.sol#458)
	- TransactionSponsored(operator,user,aPNTsAmount,xPNTsAmount,block.timestamp) (src/paymasters/v2/core/SuperPaymasterV2.sol#455)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
SuperPaymasterRegistry.getBestPaymaster() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#329-348) uses timestamp for comparisons
	Dangerous comparisons:
	- info.isActive && info.feeRate < bestFeeRate (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#337)
SuperPaymasterRegistry.getLowestBidPaymaster() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#352-372) uses timestamp for comparisons
	Dangerous comparisons:
	- info.isActive && bid.isActive && bid.bidAmount < lowestBid (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#361)
SuperPaymasterRegistry.recordSuccess(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#421-436) uses timestamp for comparisons
	Dangerous comparisons:
	- pm.totalAttempts > 0 (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#432)
SuperPaymasterRegistry.recordFailure(address) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#440-454) uses timestamp for comparisons
	Dangerous comparisons:
	- pm.totalAttempts > 0 (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#450)
GTokenStaking.stake(uint256) (src/paymasters/v2/core/GTokenStaking.sol#214-265) uses timestamp for comparisons
	Dangerous comparisons:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#229)
	- require(bool,string)(availableStake > 0,GTokenStaking: fully slashed) (src/paymasters/v2/core/GTokenStaking.sol#234)
	- userStake.unstakeRequestedAt > 0 (src/paymasters/v2/core/GTokenStaking.sol#247)
GTokenStaking.requestUnstake() (src/paymasters/v2/core/GTokenStaking.sol#271-279) uses timestamp for comparisons
	Dangerous comparisons:
	- stakes[msg.sender].stGTokenShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#272)
GTokenStaking.unstake() (src/paymasters/v2/core/GTokenStaking.sol#286-326) uses timestamp for comparisons
	Dangerous comparisons:
	- info.unstakeRequestedAt == 0 (src/paymasters/v2/core/GTokenStaking.sol#289)
	- elapsed < UNSTAKE_DELAY (src/paymasters/v2/core/GTokenStaking.sol#294)
	- totalSlashed > 0 && totalShares > 0 (src/paymasters/v2/core/GTokenStaking.sol#310)
GTokenStaking.lockStake(address,uint256,string) (src/paymasters/v2/core/GTokenStaking.sol#339-363) uses timestamp for comparisons
	Dangerous comparisons:
	- available < amount (src/paymasters/v2/core/GTokenStaking.sol#350)
GTokenStaking.calculateExitFee(address,address) (src/paymasters/v2/core/GTokenStaking.sol#424-450) uses timestamp for comparisons
	Dangerous comparisons:
	- lockDuration < config.timeTiers[i] (src/paymasters/v2/core/GTokenStaking.sol#443)
GTokenStaking.slash(address,uint256,string) (src/paymasters/v2/core/GTokenStaking.sol#465-489) uses timestamp for comparisons
	Dangerous comparisons:
	- slashedAmount == 0 (src/paymasters/v2/core/GTokenStaking.sol#479)
	- amount > userBalance (src/paymasters/v2/core/GTokenStaking.sol#477)
GTokenStaking.balanceOf(address) (src/paymasters/v2/core/GTokenStaking.sol#588-599) uses timestamp for comparisons
	Dangerous comparisons:
	- info.stGTokenShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#590)
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#593)
	- availableStake == 0 (src/paymasters/v2/core/GTokenStaking.sol#595)
GTokenStaking.availableBalance(address) (src/paymasters/v2/core/GTokenStaking.sol#606-612) uses timestamp for comparisons
	Dangerous comparisons:
	- userShares > locked (src/paymasters/v2/core/GTokenStaking.sol#611)
GTokenStaking.sharesToGToken(uint256) (src/paymasters/v2/core/GTokenStaking.sol#685-691) uses timestamp for comparisons
	Dangerous comparisons:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#686)
	- availableStake == 0 (src/paymasters/v2/core/GTokenStaking.sol#689)
GTokenStaking.gTokenToShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#698-704) uses timestamp for comparisons
	Dangerous comparisons:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#699)
	- require(bool,string)(availableStake > 0,GTokenStaking: fully slashed) (src/paymasters/v2/core/GTokenStaking.sol#702)
GTokenStaking.getUnstakeTimeRemaining(address) (src/paymasters/v2/core/GTokenStaking.sol#724-740) uses timestamp for comparisons
	Dangerous comparisons:
	- info.unstakeRequestedAt == 0 (src/paymasters/v2/core/GTokenStaking.sol#730)
	- elapsed >= UNSTAKE_DELAY (src/paymasters/v2/core/GTokenStaking.sol#735)
GTokenStaking.calculateShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#747-759) uses timestamp for comparisons
	Dangerous comparisons:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#752)
	- require(bool,string)(availableStake > 0,GTokenStaking: fully slashed) (src/paymasters/v2/core/GTokenStaking.sol#757)
GTokenStaking.getGlobalStats() (src/paymasters/v2/core/GTokenStaking.sol#768-787) uses timestamp for comparisons
	Dangerous comparisons:
	- _totalShares > 0 (src/paymasters/v2/core/GTokenStaking.sol#782)
Registry.registerCommunity(Registry.CommunityProfile,uint256) (src/paymasters/v2/core/Registry.sol#293-421) uses timestamp for comparisons
	Dangerous comparisons:
	- bytes(profile.ensName).length > 0 (src/paymasters/v2/core/Registry.sol#400)
	- i < profile.supportedSBTs.length (src/paymasters/v2/core/Registry.sol#404)
	- sbtAddress != address(0) (src/paymasters/v2/core/Registry.sol#406)
Registry.updateCommunityProfile(Registry.CommunityProfile) (src/paymasters/v2/core/Registry.sol#428-512) uses timestamp for comparisons
	Dangerous comparisons:
	- communities[communityAddress].registeredAt == 0 (src/paymasters/v2/core/Registry.sol#431)
Registry.deactivateCommunity() (src/paymasters/v2/core/Registry.sol#517-528) uses timestamp for comparisons
	Dangerous comparisons:
	- communities[communityAddress].registeredAt == 0 (src/paymasters/v2/core/Registry.sol#520)
Registry.reactivateCommunity() (src/paymasters/v2/core/Registry.sol#533-544) uses timestamp for comparisons
	Dangerous comparisons:
	- communities[communityAddress].registeredAt == 0 (src/paymasters/v2/core/Registry.sol#536)
Registry.transferCommunityOwnership(address) (src/paymasters/v2/core/Registry.sol#555-607) uses timestamp for comparisons
	Dangerous comparisons:
	- bytes(lowerName).length > 0 (src/paymasters/v2/core/Registry.sol#586)
	- bytes(profile.ensName).length > 0 (src/paymasters/v2/core/Registry.sol#591)
	- i < profile.supportedSBTs.length (src/paymasters/v2/core/Registry.sol#596)
	- sbtAddress != address(0) (src/paymasters/v2/core/Registry.sol#598)
Registry.getCommunityProfile(address) (src/paymasters/v2/core/Registry.sol#635-644) uses timestamp for comparisons
	Dangerous comparisons:
	- profile.registeredAt == 0 (src/paymasters/v2/core/Registry.sol#641)
Registry.getCommunityStatus(address) (src/paymasters/v2/core/Registry.sol#741-748) uses timestamp for comparisons
	Dangerous comparisons:
	- isRegistered = communities[communityAddress].registeredAt != 0 (src/paymasters/v2/core/Registry.sol#746)
Registry.isRegisteredCommunity(address) (src/paymasters/v2/core/Registry.sol#756-762) uses timestamp for comparisons
	Dangerous comparisons:
	- communities[communityAddress].registeredAt != 0 (src/paymasters/v2/core/Registry.sol#761)
Registry.reportFailure(address) (src/paymasters/v2/core/Registry.sol#786-810) uses timestamp for comparisons
	Dangerous comparisons:
	- stake.failureCount >= config.slashThreshold (src/paymasters/v2/core/Registry.sol#807)
Registry._toLowercase(string) (src/paymasters/v2/core/Registry.sol#932-946) uses timestamp for comparisons
	Dangerous comparisons:
	- i < strBytes.length (src/paymasters/v2/core/Registry.sol#936)
	- strBytes[i] >= 0x41 && strBytes[i] <= 0x5A (src/paymasters/v2/core/Registry.sol#937)
SuperPaymasterV2.updateTreasury(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#367-377) uses timestamp for comparisons
	Dangerous comparisons:
	- accounts[msg.sender].stakedAt == 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#368)
SuperPaymasterV2.updateExchangeRate(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#383-393) uses timestamp for comparisons
	Dangerous comparisons:
	- accounts[msg.sender].stakedAt == 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#384)
SuperPaymasterV2.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#404-462) uses timestamp for comparisons
	Dangerous comparisons:
	- xPNTsToken == address(0) || treasury == address(0) (src/paymasters/v2/core/SuperPaymasterV2.sol#439)
SuperPaymasterV2._updateReputation(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#556-579) uses timestamp for comparisons
	Dangerous comparisons:
	- daysSinceLastCheck > 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#561)
SuperPaymasterV2._calculateAPNTsAmount(uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#601-632) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp - updatedAt > 3600 (src/paymasters/v2/core/SuperPaymasterV2.sol#606)
SuperPaymasterV2._calculateXPNTsAmount(address,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#640-651) uses timestamp for comparisons
	Dangerous comparisons:
	- rate == 0 (src/paymasters/v2/core/SuperPaymasterV2.sol#643)
SuperPaymasterV2.isEligibleForUpgrade(address) (src/paymasters/v2/core/SuperPaymasterV2.sol#828-839) uses timestamp for comparisons
	Dangerous comparisons:
	- account.consecutiveDays >= 30 && account.totalTxSponsored >= 1000 && account.aPNTsBalance * 100 / account.minBalanceThreshold >= 150 && account.reputationLevel < 12 (src/paymasters/v2/core/SuperPaymasterV2.sol#835-838)
DVTValidator.signProposal(uint256,bytes) (src/paymasters/v2/monitoring/DVTValidator.sol#270-312) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > proposal.expiresAt (src/paymasters/v2/monitoring/DVTValidator.sol#290)
DVTValidator.expireProposal(uint256) (src/paymasters/v2/monitoring/DVTValidator.sol#405-415) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > proposal.expiresAt && ! proposal.executed (src/paymasters/v2/monitoring/DVTValidator.sol#411)
DVTValidator.hasEnoughSignatures(uint256) (src/paymasters/v2/monitoring/DVTValidator.sol#492-499) uses timestamp for comparisons
	Dangerous comparisons:
	- proposal.validators.length >= MIN_VALIDATORS (src/paymasters/v2/monitoring/DVTValidator.sol#498)
WeightedReputationCalculator._calculateNFTBonus(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#176-215) uses timestamp for comparisons
	Dangerous comparisons:
	- timeWeight > NFT_MAX_MONTHS (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#201)
WeightedReputationCalculator.getNFTBonusBreakdown(uint256,address) (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#231-300) uses timestamp for comparisons
	Dangerous comparisons:
	- timeWeight > NFT_MAX_MONTHS (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#280)
MySBT_v2_3_1.recordActivity(address) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#713-739) uses timestamp for comparisons
	Dangerous comparisons:
	- lastActivity > 0 && block.timestamp < lastActivity + MIN_ACTIVITY_INTERVAL (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#730)
MySBT_v2_3_1._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#820-853) uses timestamp for comparisons
	Dangerous comparisons:
	- owner == sbtData[tokenId].holder (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#840)
MySBT_v2_3_2.recordActivity(address) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#714-740) uses timestamp for comparisons
	Dangerous comparisons:
	- lastActivity > 0 && block.timestamp < lastActivity + MIN_ACTIVITY_INTERVAL (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#731)
MySBT_v2_3_2._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#821-854) uses timestamp for comparisons
	Dangerous comparisons:
	- owner == sbtData[tokenId].holder (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#841)
MySBT_v2_3_3.recordActivity(address) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#808-834) uses timestamp for comparisons
	Dangerous comparisons:
	- lastActivity > 0 && block.timestamp < lastActivity + MIN_ACTIVITY_INTERVAL (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#825)
MySBT_v2_3_3._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#915-948) uses timestamp for comparisons
	Dangerous comparisons:
	- owner == sbtData[tokenId].holder (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#935)
MySBT_v2_3.recordActivity(address) (src/paymasters/v2/tokens/MySBT_v2.3.sol#614-640) uses timestamp for comparisons
	Dangerous comparisons:
	- lastActivity > 0 && block.timestamp < lastActivity + MIN_ACTIVITY_INTERVAL (src/paymasters/v2/tokens/MySBT_v2.3.sol#631)
MySBT_v2_3._calculateDefaultReputation(uint256,address) (src/paymasters/v2/tokens/MySBT_v2.3.sol#721-754) uses timestamp for comparisons
	Dangerous comparisons:
	- owner == sbtData[tokenId].holder (src/paymasters/v2/tokens/MySBT_v2.3.sol#741)
MySBT_v2_4_0.recordActivity(address) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#783-809) uses timestamp for comparisons
	Dangerous comparisons:
	- lastActivity > 0 && block.timestamp < lastActivity + MIN_ACTIVITY_INTERVAL (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#800)
MySBT_v2_4_0._calculateNFTReputation(uint256) (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#925-965) uses timestamp for comparisons
	Dangerous comparisons:
	- currentOwner != holder (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#949)
	- nftScore > NFT_MAX_MONTHS (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#957)
PaymasterV4._calculatePNTAmount(uint256,address) (src/paymasters/v4/PaymasterV4.sol#340-370) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp - updatedAt > PRICE_STALENESS_THRESHOLD (src/paymasters/v4/PaymasterV4.sol#346)
Settlement.recordGasFee(address,address,uint256,bytes32) (src/paymasters/v4/Settlement.sol#129-176) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_feeRecords[recordKey].amount == 0,Settlement: duplicate record) (src/paymasters/v4/Settlement.sol#152-155)
Settlement.settleFees(bytes32[],bytes32) (src/paymasters/v4/Settlement.sol#190-237) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(record.amount > 0,Settlement: record not found) (src/paymasters/v4/Settlement.sol#209)
	- require(bool,string)(record.status == FeeStatus.Pending,Settlement: not pending) (src/paymasters/v4/Settlement.sol#210-213)
SettlementV3_1.recordGasFee(address,address,uint256,bytes32) (src/paymasters/v4/SettlementV3_1.sol#120-169) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_feeRecords[recordKey].amount == 0,Settlement: duplicate record) (src/paymasters/v4/SettlementV3_1.sol#146-149)
SettlementV3_1.settleFees(bytes32[],bytes32) (src/paymasters/v4/SettlementV3_1.sol#183-230) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(record.amount > 0,Settlement: record not found) (src/paymasters/v4/SettlementV3_1.sol#202)
	- require(bool,string)(record.status == FeeStatus.Pending,Settlement: not pending) (src/paymasters/v4/SettlementV3_1.sol#203-206)
SettlementV3_2.recordGasFee(address,address,uint256,bytes32) (src/paymasters/v4/SettlementV3_2.sol#129-183) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_feeRecords[recordKey].amount == 0,Settlement: duplicate record) (src/paymasters/v4/SettlementV3_2.sol#155-158)
SettlementV3_2.settleFees(bytes32[],bytes32) (src/paymasters/v4/SettlementV3_2.sol#197-245) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(record.amount > 0,Settlement: record not found) (src/paymasters/v4/SettlementV3_2.sol#216)
	- require(bool,string)(record.status == FeeStatus.Pending,Settlement: not pending) (src/paymasters/v4/SettlementV3_2.sol#217-220)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
PaymasterV4.validatePaymasterUserOp(PackedUserOperation,bytes32,uint256) (src/paymasters/v4/PaymasterV4.sol#207-261) uses assembly
	- INLINE ASM (src/paymasters/v4/PaymasterV4.sol#227-229)
PaymasterV4.checkUserQualification(address,uint256) (src/paymasters/v4/PaymasterV4.sol#537-563) uses assembly
	- INLINE ASM (src/paymasters/v4/PaymasterV4.sol#544-546)
Exec.call(address,uint256,bytes,uint256) (src/utils/Exec.sol#11-20) uses assembly
	- INLINE ASM (src/utils/Exec.sol#17-19)
Exec.staticcall(address,bytes,uint256) (src/utils/Exec.sol#22-30) uses assembly
	- INLINE ASM (src/utils/Exec.sol#27-29)
Exec.delegateCall(address,bytes,uint256) (src/utils/Exec.sol#32-40) uses assembly
	- INLINE ASM (src/utils/Exec.sol#37-39)
Exec.getReturnData(uint256) (src/utils/Exec.sol#44-58) uses assembly
	- INLINE ASM (src/utils/Exec.sol#45-57)
Exec.revertWithData(bytes) (src/utils/Exec.sol#61-65) uses assembly
	- INLINE ASM (src/utils/Exec.sol#62-64)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
6 different versions of Solidity are used:
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (contracts/lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol#2)
		-^0.8.0 (singleton-paymaster/src/interfaces/PostOpMode.sol#2)
	- Version constraint ^0.8.23 is used by:
		-^0.8.23 (singleton-paymaster/lib/account-abstraction-v7/contracts/core/Helpers.sol#2)
		-^0.8.23 (singleton-paymaster/lib/account-abstraction-v7/contracts/core/UserOperationLib.sol#2)
		-^0.8.23 (src/interfaces/ISBT.sol#2)
		-^0.8.23 (src/interfaces/ISettlement.sol#2)
		-^0.8.23 (src/interfaces/ISuperPaymasterRegistry.sol#2)
		-^0.8.23 (src/interfaces/ISuperPaymasterV3.sol#2)
		-^0.8.23 (src/interfaces/IVersioned.sol#2)
		-^0.8.23 (src/interfaces/IxPNTsFactory.sol#2)
		-^0.8.23 (src/interfaces/IxPNTsToken.sol#2)
		-^0.8.23 (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#2)
		-^0.8.23 (src/paymasters/v2/core/GTokenStaking.sol#2)
		-^0.8.23 (src/paymasters/v2/core/PaymasterFactory.sol#2)
		-^0.8.23 (src/paymasters/v2/core/Registry.sol#2)
		-^0.8.23 (src/paymasters/v2/core/SuperPaymasterV2.sol#2)
		-^0.8.23 (src/paymasters/v2/interfaces/IMySBT.sol#2)
		-^0.8.23 (src/paymasters/v2/interfaces/IReputationCalculator.sol#2)
		-^0.8.23 (src/paymasters/v2/interfaces/Interfaces.sol#2)
		-^0.8.23 (src/paymasters/v2/monitoring/BLSAggregator.sol#2)
		-^0.8.23 (src/paymasters/v2/monitoring/DVTValidator.sol#2)
		-^0.8.23 (src/paymasters/v2/reputation/NFTRatingRegistry.sol#2)
		-^0.8.23 (src/paymasters/v2/reputation/WeightedReputationCalculator.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/MySBT_v2.1.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/MySBT_v2.3.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/xPNTsFactory.sol#2)
		-^0.8.23 (src/paymasters/v2/tokens/xPNTsToken.sol#2)
		-^0.8.23 (src/paymasters/v4/Settlement.sol#2)
		-^0.8.23 (src/paymasters/v4/SettlementV3_1.sol#2)
		-^0.8.23 (src/paymasters/v4/SettlementV3_2.sol#2)
	- Version constraint >=0.7.5 is used by:
		->=0.7.5 (singleton-paymaster/lib/account-abstraction-v7/contracts/interfaces/IAggregator.sol#2)
		->=0.7.5 (singleton-paymaster/lib/account-abstraction-v7/contracts/interfaces/IEntryPoint.sol#6)
		->=0.7.5 (singleton-paymaster/lib/account-abstraction-v7/contracts/interfaces/INonceManager.sol#2)
		->=0.7.5 (singleton-paymaster/lib/account-abstraction-v7/contracts/interfaces/IStakeManager.sol#2)
		->=0.7.5 (singleton-paymaster/lib/account-abstraction-v7/contracts/interfaces/PackedUserOperation.sol#2)
	- Version constraint ^0.8.20 is used by:
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/interfaces/IERC5267.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/interfaces/draft-IERC6093.sol#3)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/proxy/Clones.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/ERC20.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/IERC20.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/utils/SafeERC20.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/IERC721.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/IERC721Receiver.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Address.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Context.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Nonces.sol#3)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Pausable.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/ReentrancyGuard.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/ShortStrings.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/StorageSlot.sol#5)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Strings.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/ECDSA.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/EIP712.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/MessageHashUtils.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/introspection/ERC165.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/introspection/IERC165.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/math/Math.sol#4)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/math/SafeCast.sol#5)
		-^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/math/SignedMath.sol#4)
		-^0.8.20 (src/mocks/MyNFT.sol#2)
		-^0.8.20 (src/mocks/TestSBT.sol#2)
		-^0.8.20 (src/tokens/FaucetSBT.sol#2)
		-^0.8.20 (src/tokens/PNTs.sol#2)
	- Version constraint ^0.8.26 is used by:
		-^0.8.26 (src/base/BasePaymasterRouter.sol#2)
		-^0.8.26 (src/interfaces/IPaymasterRouter.sol#2)
		-^0.8.26 (src/mocks/MockUSDT.sol#2)
		-^0.8.26 (src/paymasters/v3/PaymasterV3.sol#2)
		-^0.8.26 (src/paymasters/v3/PaymasterV3_1.sol#2)
		-^0.8.26 (src/paymasters/v3/PaymasterV3_2.sol#2)
		-^0.8.26 (src/paymasters/v4/PaymasterV4.sol#2)
		-^0.8.26 (src/paymasters/v4/PaymasterV4_1.sol#2)
	- Version constraint ^0.8.28 is used by:
		-^0.8.28 (src/utils/Exec.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
BasePaymasterRouter.emergencyRemovePaymaster(address) (src/base/BasePaymasterRouter.sol#218-237) has costly operations inside a loop:
	- paymasterList.pop() (src/base/BasePaymasterRouter.sol#231)
Registry.updateCommunityProfile(Registry.CommunityProfile) (src/paymasters/v2/core/Registry.sol#428-512) has costly operations inside a loop:
	- delete communityBySBT[existing.supportedSBTs[i]] (src/paymasters/v2/core/Registry.sol#484)
PaymasterV4.removeSBT(address) (src/paymasters/v4/PaymasterV4.sol#428-444) has costly operations inside a loop:
	- supportedSBTs.pop() (src/paymasters/v4/PaymasterV4.sol#436)
PaymasterV4.removeGasToken(address) (src/paymasters/v4/PaymasterV4.sol#467-483) has costly operations inside a loop:
	- supportedGasTokens.pop() (src/paymasters/v4/PaymasterV4.sol#475)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Registry.registerCommunity(Registry.CommunityProfile,uint256) (src/paymasters/v2/core/Registry.sol#293-421) has a high cyclomatic complexity (18).
Registry.updateCommunityProfile(Registry.CommunityProfile) (src/paymasters/v2/core/Registry.sol#428-512) has a high cyclomatic complexity (15).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity
INFO:Detectors:
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol#2)
	- ^0.8.0 (singleton-paymaster/src/interfaces/PostOpMode.sol#2)
Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/access/Ownable.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/interfaces/IERC5267.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/interfaces/draft-IERC6093.sol#3)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/proxy/Clones.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/ERC721.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/IERC721.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/IERC721Receiver.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Address.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Context.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Nonces.sol#3)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Pausable.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/ReentrancyGuard.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/ShortStrings.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/StorageSlot.sol#5)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/Strings.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/ECDSA.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/EIP712.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/cryptography/MessageHashUtils.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/math/Math.sol#4)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/math/SafeCast.sol#5)
	- ^0.8.20 (singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/contracts/utils/math/SignedMath.sol#4)
	- ^0.8.20 (src/mocks/MyNFT.sol#2)
	- ^0.8.20 (src/mocks/TestSBT.sol#2)
	- ^0.8.20 (src/tokens/FaucetSBT.sol#2)
	- ^0.8.20 (src/tokens/PNTs.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in MyNFT.withdraw() (src/mocks/MyNFT.sol#17-20):
	- (success,None) = address(owner()).call{value: address(this).balance}() (src/mocks/MyNFT.sol#18)
Low level call in SuperPaymasterRegistry.withdrawStake(uint256) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#240-258):
	- (success,None) = msg.sender.call{value: _amount}() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#254)
Low level call in SuperPaymasterRegistry.slashPaymaster(address,string) (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#459-482):
	- (success,None) = treasury.call{value: slashAmount}() (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#473)
Low level call in PaymasterFactory.deployPaymaster(string,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#97-131):
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#119)
Low level call in PaymasterFactory.deployPaymasterDeterministic(string,bytes32,bytes) (src/paymasters/v2/core/PaymasterFactory.sol#153-184):
	- (success,None) = paymaster.call(initData) (src/paymasters/v2/core/PaymasterFactory.sol#173)
Low level call in NFTRatingRegistry._isRegisteredCommunity(address) (src/paymasters/v2/reputation/NFTRatingRegistry.sol#325-336):
	- (success,data) = registry.staticcall(abi.encodeWithSignature(isRegisteredCommunity(address),community)) (src/paymasters/v2/reputation/NFTRatingRegistry.sol#327-329)
Low level call in PaymasterV3.withdrawETH(address,uint256) (src/paymasters/v3/PaymasterV3.sol#333-338):
	- (success,None) = to.call{value: amount}() (src/paymasters/v3/PaymasterV3.sol#336)
Low level call in PaymasterV3_1.withdrawETH(address,uint256) (src/paymasters/v3/PaymasterV3_1.sol#332-337):
	- (success,None) = to.call{value: amount}() (src/paymasters/v3/PaymasterV3_1.sol#335)
Low level call in PaymasterV3_2.withdrawETH(address,uint256) (src/paymasters/v3/PaymasterV3_2.sol#332-337):
	- (success,None) = to.call{value: amount}() (src/paymasters/v3/PaymasterV3_2.sol#335)
Low level call in PNTs.withdraw() (src/tokens/PNTs.sol#14-17):
	- (success,None) = address(owner()).call{value: address(this).balance}() (src/tokens/PNTs.sol#15)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
SuperPaymasterRegistry (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#12-611) should inherit from ISuperPaymasterRegistry (src/interfaces/ISuperPaymasterRegistry.sol#10-81)
GTokenStaking (src/paymasters/v2/core/GTokenStaking.sol#28-788) should inherit from IGTokenStaking (src/paymasters/v2/interfaces/Interfaces.sol#85-94)
Registry (src/paymasters/v2/core/Registry.sol#27-971) should inherit from IRegistryV2_1 (src/paymasters/v2/interfaces/Interfaces.sol#156-173)
BLSAggregator (src/paymasters/v2/monitoring/BLSAggregator.sol#30-467) should inherit from IBLSAggregator (src/paymasters/v2/interfaces/Interfaces.sol#142-150)
DVTValidator (src/paymasters/v2/monitoring/DVTValidator.sol#28-513) should inherit from IDVTValidator (src/paymasters/v2/interfaces/Interfaces.sol#134-136)
xPNTsFactory (src/paymasters/v2/tokens/xPNTsFactory.sol#27-428) should inherit from IxPNTsFactory (src/interfaces/IxPNTsFactory.sol#9-16)
xPNTsToken (src/paymasters/v2/tokens/xPNTsToken.sol#29-307) should inherit from IGToken (src/paymasters/v2/interfaces/Interfaces.sol#100-102)
xPNTsToken (src/paymasters/v2/tokens/xPNTsToken.sol#29-307) should inherit from IxPNTsToken (src/paymasters/v2/interfaces/Interfaces.sol#108-110)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance
INFO:Detectors:
Parameter BasePaymasterRouter.registerPaymaster(address,uint256,string)._paymaster (src/base/BasePaymasterRouter.sol#49) is not in mixedCase
Parameter BasePaymasterRouter.registerPaymaster(address,uint256,string)._feeRate (src/base/BasePaymasterRouter.sol#50) is not in mixedCase
Parameter BasePaymasterRouter.registerPaymaster(address,uint256,string)._name (src/base/BasePaymasterRouter.sol#51) is not in mixedCase
Parameter BasePaymasterRouter.updateFeeRate(uint256)._newFeeRate (src/base/BasePaymasterRouter.sol#76) is not in mixedCase
Parameter BasePaymasterRouter.setPaymasterStatus(address,bool)._paymaster (src/base/BasePaymasterRouter.sol#88) is not in mixedCase
Parameter BasePaymasterRouter.setPaymasterStatus(address,bool)._isActive (src/base/BasePaymasterRouter.sol#88) is not in mixedCase
Parameter BasePaymasterRouter.getPaymasterInfo(address)._paymaster (src/base/BasePaymasterRouter.sol#156) is not in mixedCase
Parameter BasePaymasterRouter.updateStats(address,bool)._paymaster (src/base/BasePaymasterRouter.sol#171) is not in mixedCase
Parameter BasePaymasterRouter.updateStats(address,bool)._success (src/base/BasePaymasterRouter.sol#171) is not in mixedCase
Parameter BasePaymasterRouter.setRouterFeeRate(uint256)._newFeeRate (src/base/BasePaymasterRouter.sol#191) is not in mixedCase
Parameter BasePaymasterRouter.emergencyRemovePaymaster(address)._paymaster (src/base/BasePaymasterRouter.sol#218) is not in mixedCase
Parameter SuperPaymasterRegistry.registerPaymaster(string,uint256)._name (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#193) is not in mixedCase
Parameter SuperPaymasterRegistry.registerPaymaster(string,uint256)._feeRate (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#194) is not in mixedCase
Parameter SuperPaymasterRegistry.withdrawStake(uint256)._amount (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#240) is not in mixedCase
Parameter SuperPaymasterRegistry.updateFeeRate(uint256)._newFeeRate (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#262) is not in mixedCase
Parameter SuperPaymasterRegistry.placeBid(uint256)._bidAmount (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#306) is not in mixedCase
Parameter SuperPaymasterRegistry.updateReputation(address,uint256)._paymaster (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#404) is not in mixedCase
Parameter SuperPaymasterRegistry.updateReputation(address,uint256)._newReputation (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#405) is not in mixedCase
Parameter SuperPaymasterRegistry.recordSuccess(address)._paymaster (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#421) is not in mixedCase
Parameter SuperPaymasterRegistry.recordFailure(address)._paymaster (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#440) is not in mixedCase
Parameter SuperPaymasterRegistry.slashPaymaster(address,string)._paymaster (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#460) is not in mixedCase
Parameter SuperPaymasterRegistry.slashPaymaster(address,string)._reason (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#461) is not in mixedCase
Parameter SuperPaymasterRegistry.getPaymasterFullInfo(address)._paymaster (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#520) is not in mixedCase
Parameter SuperPaymasterRegistry.updateRouterFeeRate(uint256)._newFeeRate (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#569) is not in mixedCase
Parameter SuperPaymasterRegistry.updateTreasury(address)._newTreasury (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#580) is not in mixedCase
Parameter SuperPaymasterRegistry.updateMinStake(uint256)._newMinStake (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#591) is not in mixedCase
Parameter SuperPaymasterRegistry.updateSlashPercentage(uint256)._newPercentage (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#600) is not in mixedCase
Variable GTokenStaking.GTOKEN (src/paymasters/v2/core/GTokenStaking.sol#83) is not in mixedCase
Parameter Registry.setOracle(address)._oracle (src/paymasters/v2/core/Registry.sol#882) is not in mixedCase
Parameter Registry.setSuperPaymasterV2(address)._superPaymasterV2 (src/paymasters/v2/core/Registry.sol#896) is not in mixedCase
Variable Registry.GTOKEN_STAKING (src/paymasters/v2/core/Registry.sol#113) is not in mixedCase
Event SuperPaymasterV2.aPNTsDeposited(address,uint256,uint256) (src/paymasters/v2/core/SuperPaymasterV2.sol#171-175) is not in CapWords
Parameter SuperPaymasterV2.setDVTAggregator(address)._dvtAggregator (src/paymasters/v2/core/SuperPaymasterV2.sol#679) is not in mixedCase
Parameter SuperPaymasterV2.setEntryPoint(address)._entryPoint (src/paymasters/v2/core/SuperPaymasterV2.sol#777) is not in mixedCase
Variable SuperPaymasterV2.GTOKEN_STAKING (src/paymasters/v2/core/SuperPaymasterV2.sol#88) is not in mixedCase
Variable SuperPaymasterV2.REGISTRY (src/paymasters/v2/core/SuperPaymasterV2.sol#91) is not in mixedCase
Variable SuperPaymasterV2.DVT_AGGREGATOR (src/paymasters/v2/core/SuperPaymasterV2.sol#97) is not in mixedCase
Variable SuperPaymasterV2.ENTRY_POINT (src/paymasters/v2/core/SuperPaymasterV2.sol#100) is not in mixedCase
Variable SuperPaymasterV2.REPUTATION_LEVELS (src/paymasters/v2/core/SuperPaymasterV2.sol#136-149) is not in mixedCase
Contract IRegistryV2_1 (src/paymasters/v2/interfaces/Interfaces.sol#156-173) is not in CapWords
Parameter BLSAggregator.setSuperPaymaster(address)._superPaymaster (src/paymasters/v2/monitoring/BLSAggregator.sol#381) is not in mixedCase
Parameter BLSAggregator.setDVTValidator(address)._dvtValidator (src/paymasters/v2/monitoring/BLSAggregator.sol#396) is not in mixedCase
Variable BLSAggregator.SUPERPAYMASTER (src/paymasters/v2/monitoring/BLSAggregator.sol#57) is not in mixedCase
Variable BLSAggregator.DVT_VALIDATOR (src/paymasters/v2/monitoring/BLSAggregator.sol#60) is not in mixedCase
Parameter DVTValidator.setSuperPaymaster(address)._superPaymaster (src/paymasters/v2/monitoring/DVTValidator.sol#360) is not in mixedCase
Parameter DVTValidator.setBLSAggregator(address)._blsAggregator (src/paymasters/v2/monitoring/DVTValidator.sol#375) is not in mixedCase
Variable DVTValidator.SUPERPAYMASTER (src/paymasters/v2/monitoring/DVTValidator.sol#67) is not in mixedCase
Variable DVTValidator.BLS_AGGREGATOR (src/paymasters/v2/monitoring/DVTValidator.sol#70) is not in mixedCase
Contract MySBT_v2_1 (src/paymasters/v2/tokens/MySBT_v2.1.sol#36-811) is not in CapWords
Variable MySBT_v2_1.GTOKEN (src/paymasters/v2/tokens/MySBT_v2.1.sol#79) is not in mixedCase
Variable MySBT_v2_1.GTOKEN_STAKING (src/paymasters/v2/tokens/MySBT_v2.1.sol#82) is not in mixedCase
Variable MySBT_v2_1.REGISTRY (src/paymasters/v2/tokens/MySBT_v2.1.sol#89) is not in mixedCase
Contract MySBT_v2_3_1 (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#28-973) is not in CapWords
Variable MySBT_v2_3_1.GTOKEN (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#84) is not in mixedCase
Variable MySBT_v2_3_1.GTOKEN_STAKING (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#87) is not in mixedCase
Variable MySBT_v2_3_1.REGISTRY (src/paymasters/v2/tokens/MySBT_v2.3.1.sol#94) is not in mixedCase
Contract MySBT_v2_3_2 (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#26-974) is not in CapWords
Variable MySBT_v2_3_2.GTOKEN (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#82) is not in mixedCase
Variable MySBT_v2_3_2.GTOKEN_STAKING (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#85) is not in mixedCase
Variable MySBT_v2_3_2.REGISTRY (src/paymasters/v2/tokens/MySBT_v2.3.2.sol#95) is not in mixedCase
Contract MySBT_v2_3_3 (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#27-1068) is not in CapWords
Variable MySBT_v2_3_3.GTOKEN (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#83) is not in mixedCase
Variable MySBT_v2_3_3.GTOKEN_STAKING (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#86) is not in mixedCase
Variable MySBT_v2_3_3.REGISTRY (src/paymasters/v2/tokens/MySBT_v2.3.3.sol#96) is not in mixedCase
Contract MySBT_v2_3 (src/paymasters/v2/tokens/MySBT_v2.3.sol#31-874) is not in CapWords
Variable MySBT_v2_3.GTOKEN (src/paymasters/v2/tokens/MySBT_v2.3.sol#87) is not in mixedCase
Variable MySBT_v2_3.GTOKEN_STAKING (src/paymasters/v2/tokens/MySBT_v2.3.sol#90) is not in mixedCase
Variable MySBT_v2_3.REGISTRY (src/paymasters/v2/tokens/MySBT_v2.3.sol#97) is not in mixedCase
Contract MySBT_v2_4_0 (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#34-1085) is not in CapWords
Variable MySBT_v2_4_0.GTOKEN (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#87) is not in mixedCase
Variable MySBT_v2_4_0.GTOKEN_STAKING (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#90) is not in mixedCase
Variable MySBT_v2_4_0.REGISTRY (src/paymasters/v2/tokens/MySBT_v2.4.0.sol#100) is not in mixedCase
Contract xPNTsFactory (src/paymasters/v2/tokens/xPNTsFactory.sol#27-428) is not in CapWords
Event xPNTsFactory.xPNTsTokenDeployed(address,address,string,string) (src/paymasters/v2/tokens/xPNTsFactory.sol#81-86) is not in CapWords
Variable xPNTsFactory.SUPERPAYMASTER (src/paymasters/v2/tokens/xPNTsFactory.sol#46) is not in mixedCase
Variable xPNTsFactory.REGISTRY (src/paymasters/v2/tokens/xPNTsFactory.sol#49) is not in mixedCase
Contract xPNTsToken (src/paymasters/v2/tokens/xPNTsToken.sol#29-307) is not in CapWords
Variable xPNTsToken.FACTORY (src/paymasters/v2/tokens/xPNTsToken.sol#36) is not in mixedCase
Parameter PaymasterV3.setSBTContract(address)._sbtContract (src/paymasters/v3/PaymasterV3.sol#278) is not in mixedCase
Parameter PaymasterV3.setGasToken(address)._gasToken (src/paymasters/v3/PaymasterV3.sol#288) is not in mixedCase
Parameter PaymasterV3.setSettlementContract(address)._settlementContract (src/paymasters/v3/PaymasterV3.sol#298) is not in mixedCase
Parameter PaymasterV3.setMinTokenBalance(uint256)._minTokenBalance (src/paymasters/v3/PaymasterV3.sol#309) is not in mixedCase
Contract PaymasterV3_1 (src/paymasters/v3/PaymasterV3_1.sol#24-394) is not in CapWords
Parameter PaymasterV3_1.setSBTContract(address)._sbtContract (src/paymasters/v3/PaymasterV3_1.sol#277) is not in mixedCase
Parameter PaymasterV3_1.setGasToken(address)._gasToken (src/paymasters/v3/PaymasterV3_1.sol#287) is not in mixedCase
Parameter PaymasterV3_1.setSettlementContract(address)._settlementContract (src/paymasters/v3/PaymasterV3_1.sol#297) is not in mixedCase
Parameter PaymasterV3_1.setMinTokenBalance(uint256)._minTokenBalance (src/paymasters/v3/PaymasterV3_1.sol#308) is not in mixedCase
Contract PaymasterV3_2 (src/paymasters/v3/PaymasterV3_2.sol#24-394) is not in CapWords
Parameter PaymasterV3_2.setSBTContract(address)._sbtContract (src/paymasters/v3/PaymasterV3_2.sol#277) is not in mixedCase
Parameter PaymasterV3_2.setGasToken(address)._gasToken (src/paymasters/v3/PaymasterV3_2.sol#287) is not in mixedCase
Parameter PaymasterV3_2.setSettlementContract(address)._settlementContract (src/paymasters/v3/PaymasterV3_2.sol#297) is not in mixedCase
Parameter PaymasterV3_2.setMinTokenBalance(uint256)._minTokenBalance (src/paymasters/v3/PaymasterV3_2.sol#308) is not in mixedCase
Parameter PaymasterV4.setTreasury(address)._treasury (src/paymasters/v4/PaymasterV4.sol#378) is not in mixedCase
Parameter PaymasterV4.setServiceFeeRate(uint256)._serviceFeeRate (src/paymasters/v4/PaymasterV4.sol#389) is not in mixedCase
Parameter PaymasterV4.setMaxGasCostCap(uint256)._maxGasCostCap (src/paymasters/v4/PaymasterV4.sol#400) is not in mixedCase
Contract PaymasterV4_1 (src/paymasters/v4/PaymasterV4_1.sol#15-159) is not in CapWords
Parameter Settlement.setFeeRate(uint256)._feeRate (src/paymasters/v4/Settlement.sol#339) is not in mixedCase
Parameter Settlement.setTreasury(address)._treasury (src/paymasters/v4/Settlement.sol#352) is not in mixedCase
Contract SettlementV3_1 (src/paymasters/v4/SettlementV3_1.sol#26-379) is not in CapWords
Parameter SettlementV3_1.setFeeRate(uint256)._feeRate (src/paymasters/v4/SettlementV3_1.sol#340) is not in mixedCase
Parameter SettlementV3_1.setTreasury(address)._treasury (src/paymasters/v4/SettlementV3_1.sol#353) is not in mixedCase
Contract SettlementV3_2 (src/paymasters/v4/SettlementV3_2.sol#30-392) is not in CapWords
Parameter SettlementV3_2.setFeeRate(uint256)._feeRate (src/paymasters/v4/SettlementV3_2.sol#353) is not in mixedCase
Parameter SettlementV3_2.setTreasury(address)._treasury (src/paymasters/v4/SettlementV3_2.sol#366) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
PaymasterV3.PAYMASTER_DATA_OFFSET (src/paymasters/v3/PaymasterV3.sol#34) is never used in PaymasterV3 (src/paymasters/v3/PaymasterV3.sol#25-395)
PaymasterV3_1.PAYMASTER_DATA_OFFSET (src/paymasters/v3/PaymasterV3_1.sol#33) is never used in PaymasterV3_1 (src/paymasters/v3/PaymasterV3_1.sol#24-394)
PaymasterV3_2.PAYMASTER_DATA_OFFSET (src/paymasters/v3/PaymasterV3_2.sol#33) is never used in PaymasterV3_2 (src/paymasters/v3/PaymasterV3_2.sol#24-394)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
Loop condition i < paymasterList.length (src/base/BasePaymasterRouter.sol#108) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < paymasterList.length (src/base/BasePaymasterRouter.sol#134) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < paymasterList.length (src/base/BasePaymasterRouter.sol#144) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < paymasterList.length (src/base/BasePaymasterRouter.sol#256) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < paymasterList.length (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#333) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < paymasterList.length (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#356) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < paymasterList.length (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#378) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < paymasterList.length (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#386) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < paymasterList.length (src/paymasters/registry/SuperPaymasterRegistry_v1_2.sol#545) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length
INFO:Detectors:
SuperPaymasterV2.aPNTsPriceUSD (src/paymasters/v2/core/SuperPaymasterV2.sol#109) should be constant 
SuperPaymasterV2.gasToUSDRate (src/paymasters/v2/core/SuperPaymasterV2.sol#117) should be constant 
SuperPaymasterV2.serviceFeeRate (src/paymasters/v2/core/SuperPaymasterV2.sol#120) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:. analyzed (89 contracts with 100 detectors), 367 result(s) found
