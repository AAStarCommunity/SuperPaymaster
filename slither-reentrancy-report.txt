'forge config --json' running
'/Users/nicolasshuaishuai/.solc-select/artifacts/solc-0.8.28/solc-0.8.28 --version' running
'/Users/nicolasshuaishuai/.solc-select/artifacts/solc-0.8.28/solc-0.8.28 forge-std/=contracts/lib/forge-std/src/ @openzeppelin/contracts/=contracts/lib/openzeppelin-contracts/contracts/ @openzeppelin-v5.0.2/=singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/ @account-abstraction-v7/=singleton-paymaster/lib/account-abstraction-v7/contracts/ @chainlink/contracts/=contracts/lib/chainlink-brownie-contracts/contracts/ solady/=singleton-paymaster/lib/solady/src/ account-abstraction-v6/=singleton-paymaster/lib/account-abstraction-v6/contracts/ account-abstraction-v7/=singleton-paymaster/lib/account-abstraction-v7/contracts/ account-abstraction-v8/=singleton-paymaster/lib/account-abstraction-v8/contracts/ chainlink-brownie-contracts/=contracts/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/ ds-test/=singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/lib/forge-std/lib/ds-test/src/ erc4626-tests/=contracts/lib/openzeppelin-contracts/lib/erc4626-tests/ halmos-cheatcodes/=contracts/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/ openzeppelin-contracts-v4.8.3/=singleton-paymaster/lib/openzeppelin-contracts-v4.8.3/ openzeppelin-contracts-v5.0.2/=singleton-paymaster/lib/openzeppelin-contracts-v5.0.2/ openzeppelin-contracts-v5.1.0/=singleton-paymaster/lib/openzeppelin-contracts-v5.1.0/ openzeppelin-contracts/=contracts/lib/openzeppelin-contracts/ src/paymasters/v2/core/GTokenStaking.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --optimize --optimize-runs 1000000 --via-ir --evm-version cancun --allow-paths .,/Volumes/UltraDisk/Dev2/aastar/SuperPaymaster/src/paymasters/v2/core' running
INFO:Detectors:
Reentrancy in GTokenStaking.stake(uint256) (src/paymasters/v2/core/GTokenStaking.sol#217-264):
	External calls:
	- IERC20(GTOKEN).safeTransferFrom(msg.sender,address(this),amount) (src/paymasters/v2/core/GTokenStaking.sol#229)
	State variables written after the call(s):
	- userStake.amount += amount (src/paymasters/v2/core/GTokenStaking.sol#241)
	- userStake.stGTokenShares += shares (src/paymasters/v2/core/GTokenStaking.sol#242)
	- userStake.unstakeRequestedAt = 0 (src/paymasters/v2/core/GTokenStaking.sol#246)
	- stakes[msg.sender] = StakeInfo({amount:amount,stGTokenShares:shares,slashedAmount:0,stakedAt:block.timestamp,unstakeRequestedAt:0}) (src/paymasters/v2/core/GTokenStaking.sol#250-256)
	- totalShares += shares (src/paymasters/v2/core/GTokenStaking.sol#261)
	- totalStaked += amount (src/paymasters/v2/core/GTokenStaking.sol#260)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
GTokenStaking.requestUnstake() (src/paymasters/v2/core/GTokenStaking.sol#270-278) uses timestamp for comparisons
	Dangerous comparisons:
	- stakes[msg.sender].stGTokenShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#271)
GTokenStaking.unstake() (src/paymasters/v2/core/GTokenStaking.sol#285-326) uses timestamp for comparisons
	Dangerous comparisons:
	- info.unstakeRequestedAt == 0 (src/paymasters/v2/core/GTokenStaking.sol#288)
	- elapsed < UNSTAKE_DELAY (src/paymasters/v2/core/GTokenStaking.sol#293)
	- slashedAmount > 0 && treasury != address(0) (src/paymasters/v2/core/GTokenStaking.sol#321)
GTokenStaking.lockStake(address,uint256,string) (src/paymasters/v2/core/GTokenStaking.sol#339-363) uses timestamp for comparisons
	Dangerous comparisons:
	- available < amount (src/paymasters/v2/core/GTokenStaking.sol#350)
GTokenStaking.calculateExitFee(address,address,uint256) (src/paymasters/v2/core/GTokenStaking.sol#439-488) uses timestamp for comparisons
	Dangerous comparisons:
	- lockDuration < config.timeTiers[i] (src/paymasters/v2/core/GTokenStaking.sol#458)
GTokenStaking.slash(address,uint256,string) (src/paymasters/v2/core/GTokenStaking.sol#504-534) uses timestamp for comparisons
	Dangerous comparisons:
	- slashedAmount == 0 (src/paymasters/v2/core/GTokenStaking.sol#519)
	- amount > userBalance (src/paymasters/v2/core/GTokenStaking.sol#517)
GTokenStaking.balanceOf(address) (src/paymasters/v2/core/GTokenStaking.sol#656-665) uses timestamp for comparisons
	Dangerous comparisons:
	- info.stGTokenShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#658)
	- info.stGTokenShares <= info.slashedAmount (src/paymasters/v2/core/GTokenStaking.sol#662)
GTokenStaking.availableBalance(address) (src/paymasters/v2/core/GTokenStaking.sol#672-678) uses timestamp for comparisons
	Dangerous comparisons:
	- totalBalance > locked (src/paymasters/v2/core/GTokenStaking.sol#677)
GTokenStaking.getUnstakeTimeRemaining(address) (src/paymasters/v2/core/GTokenStaking.sol#786-802) uses timestamp for comparisons
	Dangerous comparisons:
	- info.unstakeRequestedAt == 0 (src/paymasters/v2/core/GTokenStaking.sol#792)
	- elapsed >= UNSTAKE_DELAY (src/paymasters/v2/core/GTokenStaking.sol#797)
GTokenStaking.calculateShares(uint256) (src/paymasters/v2/core/GTokenStaking.sol#809-820) uses timestamp for comparisons
	Dangerous comparisons:
	- totalShares == 0 (src/paymasters/v2/core/GTokenStaking.sol#814)
	- require(bool,string)(totalStaked > 0,GTokenStaking: invalid state) (src/paymasters/v2/core/GTokenStaking.sol#818)
GTokenStaking.getGlobalStats() (src/paymasters/v2/core/GTokenStaking.sol#829-846) uses timestamp for comparisons
	Dangerous comparisons:
	- _totalShares > 0 (src/paymasters/v2/core/GTokenStaking.sol#841)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Slither:src/paymasters/v2/core/GTokenStaking.sol analyzed (7 contracts with 5 detectors), 11 result(s) found
